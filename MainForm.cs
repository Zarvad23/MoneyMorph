using System; // –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã .NET
using System.Drawing; // –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥—Ä–∞—Ñ–∏–∫–æ–π –∏ —Ü–≤–µ—Ç–∞–º–∏
using System.Drawing.Drawing2D; // –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
using System.Linq; // –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
using System.Threading.Tasks; // –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
using System.Windows.Forms; // –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å Windows Forms –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

namespace MoneyMorph
{
    // –ì–ª–∞–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
    public class MainForm : Form
    {
        private readonly CurrencyConverter _converter; // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
        private ComboBox _fromBox = null!; // –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã null! –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á—Ç–æ–±—ã –ø–æ–¥–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ–º null
        private ComboBox _toBox = null!; // –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã
        private TextBox _amountBox = null!; // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        private Label _answerLabel = null!; // –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        private NumericUpDown _decimalsBox = null!; // –°—á—ë—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        private DataGridView _ratesGrid = null!; // –¢–∞–±–ª–∏—Ü–∞ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
        private Label _connectionLabel = null!; // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        private Label _lastUpdateLabel = null!; // –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        private Button _updateRatesButton = null!; // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
        private System.Windows.Forms.Timer _autoUpdateTimer = null!; // –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        private bool _isUpdatingRates; // –§–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
        private bool _connectionOnline; // –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        private bool _isDarkMode; // –§–ª–∞–≥ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        private NeonPanel _headerPanel = null!; // –ù–µ–æ–Ω–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        private ListBox _historyList = null!; // –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π
        private ListView _insightsView = null!; // –¢–∞–±–ª–∏—Ü–∞ —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
        private ListView _quickBurstView = null!; // –¢–∞–±–ª–∏—Ü–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º–∏
        private FlowLayoutPanel _vibePanel = null!; // –ü–∞–Ω–µ–ª—å —Å –¥–∏–Ω–∞–º–∏—á–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        private Label _vibeLabel = null!; // –ú–µ—Ç–∫–∞ —Å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–º
        private System.Windows.Forms.Timer _neonTimer = null!; // –¢–∞–π–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ–æ–Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        private readonly Random _random = new Random(); // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        private readonly string[] _vibeLibrary = // –ù–∞–±–æ—Ä –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        {
            "–ó–∞—Ä—è–¥–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –Ω–æ–≤—ã–º–∏ –∫—É—Ä—Å–∞–º–∏!",
            "–ö–∞–∂–¥—ã–π –∫–ª–∏–∫ ‚Äî –∫–∞–∫ —É–¥–∞—Ä –ø–æ –±–∞—Å—É –≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞.",
            "–ö–æ–º–∞–Ω–¥–∞ MoneyMorph –¥–µ—Ä–∂–∏—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ä–∏—Ç–º —Ä—ã–Ω–∫–∞.",
            "–•–≤–∞—Ç–∞–π—Ç–µ –ª—É—á—à–∏–π –∫—É—Ä—Å, –ø–æ–∫–∞ –æ–Ω —Å–∏—è–µ—Ç!",
            "–ò–≥—Ä–∞–µ–º –Ω–∞ –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ ‚Äî –≤–∞–ª—é—Ç–Ω—ã–π –¥–∏–¥–∂–µ–π –¥–æ–≤–æ–ª–µ–Ω.",
            "–ß–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–π, —Ç–µ–º —è—Ä—á–µ –Ω–µ–æ–Ω –Ω–∞ –ø–∞–Ω–µ–ª–∏.",
            "–í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–≤–µ—Ä—Ö—Å–∫–æ—Ä–æ—Å—Ç–∏: –∫—É—Ä—Å —É–∂–µ –≥–æ—Ç–æ–≤.",
            "–ü—É—Å—Ç—å —á–∏—Å–ª–∞ —Ç–∞–Ω—Ü—É—é—Ç ‚Äî –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –±–∏—Ç–æ–º."
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É –∏ –≤—Å–µ –µ—ë –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        public MainForm() // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≥–ª–∞–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
        {
            _converter = new CurrencyConverter(); // –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
            BuildLayout(); // –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            LoadCurrencies(); // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
            RefreshRatesTable(); // –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫—É—Ä—Å–æ–≤
            ApplyTheme(); // –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            UpdateVibeStatus("üéö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MoneyMorph Neon Lab!"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–ª–æ–≥–∞–Ω
            Load += MainForm_Load; // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
            FormClosed += MainForm_FormClosed; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
        }

        // –°–æ–∑–¥–∞—ë—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ä–º–µ


        private void BuildLayout()
        {
            Text = "MoneyMorph Neon Lab"; // –ù–æ–≤—ã–π —è—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            StartPosition = FormStartPosition.CenterScreen; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            MinimumSize = new Size(940, 580); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤

            TableLayoutPanel rootLayout = new TableLayoutPanel
            {
                Dock = DockStyle.Fill, // –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é —Ñ–æ—Ä–º—É
                ColumnCount = 1, // –û–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞
                RowCount = 3, // –¢—Ä–∏ —Å—Ç—Ä–æ–∫–∏: —à–∞–ø–∫–∞, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
                Padding = new Padding(0) // –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–Ω–µ—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
            };
            rootLayout.RowStyles.Add(new RowStyle(SizeType.AutoSize)); // –í—ã—Å–æ—Ç–∞ —à–∞–ø–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            rootLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 100f)); // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ
            rootLayout.RowStyles.Add(new RowStyle(SizeType.AutoSize)); // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –∞–≤—Ç–æ—Ä–∞–∑–º–µ—Ä–∞
            Controls.Add(rootLayout); // –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ —Ñ–æ—Ä–º—É

            // –°–æ–∑–¥–∞—ë—Ç —Å–∏—è—é—â—É—é –Ω–µ–æ–Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            _headerPanel = new NeonPanel
            {
                Dock = DockStyle.Fill, // –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É
                Padding = new Padding(28, 20, 28, 20), // –î–æ–±–∞–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
                Margin = new Padding(0) // –ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
            };

            TableLayoutPanel headerContent = new TableLayoutPanel
            {
                Dock = DockStyle.Fill, // –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø–∞–Ω–µ–ª—å
                ColumnCount = 1,
                RowCount = 3,
                BackColor = Color.Transparent
            };
            headerContent.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            headerContent.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            headerContent.RowStyles.Add(new RowStyle(SizeType.AutoSize));

            Label titleLabel = new Label
            {
                Text = "MoneyMorph Neon Lab", // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                AutoSize = true,
                Font = new Font("Segoe UI", 22f, FontStyle.Bold), // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
                ForeColor = Color.White,
                BackColor = Color.Transparent
            };
            headerContent.Controls.Add(titleLabel, 0, 0);

            Label subtitleLabel = new Label
            {
                Text = "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–∞–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –Ω–µ–æ–Ω–∞", // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
                AutoSize = true,
                Font = new Font("Segoe UI", 11.5f, FontStyle.Regular),
                ForeColor = Color.WhiteSmoke,
                BackColor = Color.Transparent,
                Margin = new Padding(0, 6, 0, 0)
            };
            headerContent.Controls.Add(subtitleLabel, 0, 1);

            FlowLayoutPanel badgePanel = new FlowLayoutPanel
            {
                Dock = DockStyle.Fill,
                AutoSize = true,
                AutoSizeMode = AutoSizeMode.GrowAndShrink,
                FlowDirection = FlowDirection.LeftToRight,
                WrapContents = true,
                BackColor = Color.Transparent,
                Margin = new Padding(0, 12, 0, 0)
            };
            badgePanel.Controls.Add(CreateBadge("‚ö° –ñ–∏–≤—ã–µ –∫—É—Ä—Å—ã –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤"));
            badgePanel.Controls.Add(CreateBadge("üéõ –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤ –ø–æ–¥ –≤–∞—à–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"));
            badgePanel.Controls.Add(CreateBadge("üåå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–≤–µ—Ç–∏—Ç—Å—è –∏–¥–µ—è–º–∏"));
            headerContent.Controls.Add(badgePanel, 0, 2);

            _headerPanel.Controls.Add(headerContent);
            rootLayout.Controls.Add(_headerPanel, 0, 0);

            // –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
            TableLayoutPanel contentLayout = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                ColumnCount = 2,
                RowCount = 1,
                Padding = new Padding(24, 22, 24, 12)
            };
            contentLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 47f));
            contentLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 53f));
            rootLayout.Controls.Add(contentLayout, 0, 1);

            // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—Ç–æ—Ä–∏—è
            TableLayoutPanel leftColumn = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                ColumnCount = 1,
                RowCount = 2,
                Padding = new Padding(0, 0, 16, 0)
            };
            leftColumn.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            leftColumn.RowStyles.Add(new RowStyle(SizeType.Percent, 100f));
            contentLayout.Controls.Add(leftColumn, 0, 0);

            TableLayoutPanel inputLayout = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                ColumnCount = 2,
                RowCount = 8,
                AutoSize = true,
                AutoSizeMode = AutoSizeMode.GrowAndShrink
            };
            inputLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 48f));
            inputLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 52f));
            for (int i = 0; i < 8; i++)
            {
                inputLayout.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            }
            leftColumn.Controls.Add(inputLayout, 0, 0);

            Label helpLabel = new Label
            {
                Text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞", // –ü–æ–¥—Å–∫–∞–∑–∫–∞
                AutoSize = true
            };
            inputLayout.Controls.Add(helpLabel, 0, 0);
            inputLayout.SetColumnSpan(helpLabel, 2);

            Label fromLabel = new Label
            {
                Text = "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞:",
                AutoSize = true,
                Margin = new Padding(0, 6, 0, 6)
            };
            inputLayout.Controls.Add(fromLabel, 0, 1);

            _fromBox = new ComboBox
            {
                Dock = DockStyle.Fill,
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            inputLayout.Controls.Add(_fromBox, 1, 1);

            Label toLabel = new Label
            {
                Text = "–ù—É–∂–Ω–∞—è –≤–∞–ª—é—Ç–∞:",
                AutoSize = true,
                Margin = new Padding(0, 6, 0, 6)
            };
            inputLayout.Controls.Add(toLabel, 0, 2);

            _toBox = new ComboBox
            {
                Dock = DockStyle.Fill,
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            inputLayout.Controls.Add(_toBox, 1, 2);

            Label amountLabel = new Label
            {
                Text = "–°—É–º–º–∞:",
                AutoSize = true,
                Margin = new Padding(0, 6, 0, 6)
            };
            inputLayout.Controls.Add(amountLabel, 0, 3);

            _amountBox = new TextBox
            {
                Dock = DockStyle.Fill,
                PlaceholderText = "–ù–∞–ø—Ä–∏–º–µ—Ä, 125.50" // –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –ø–æ–ª–µ
            };
            inputLayout.Controls.Add(_amountBox, 1, 3);

            Label decimalsLabel = new Label
            {
                Text = "–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ (–∑–Ω–∞–∫–æ–≤):",
                AutoSize = true,
                Margin = new Padding(0, 6, 0, 6)
            };
            inputLayout.Controls.Add(decimalsLabel, 0, 4);

            _decimalsBox = new NumericUpDown
            {
                Dock = DockStyle.Left,
                Minimum = 0,
                Maximum = 6,
                Value = 2,
                Width = 90
            };
            inputLayout.Controls.Add(_decimalsBox, 1, 4);

            FlowLayoutPanel buttonPanel = new FlowLayoutPanel
            {
                Dock = DockStyle.Fill,
                FlowDirection = FlowDirection.LeftToRight,
                AutoSize = true,
                WrapContents = true,
                Margin = new Padding(0, 10, 0, 0)
            };
            inputLayout.Controls.Add(buttonPanel, 0, 5);
            inputLayout.SetColumnSpan(buttonPanel, 2);

            Button convertButton = new Button
            {
                Text = "–ü–æ—Å—á–∏—Ç–∞—Ç—å",
                AutoSize = true,
                Padding = new Padding(14, 6, 14, 6)
            };
            convertButton.Click += ConvertButton_Click;
            buttonPanel.Controls.Add(convertButton);

            Button swapButton = new Button
            {
                Text = "–ü–æ–º–µ–Ω—è—Ç—å",
                AutoSize = true,
                Padding = new Padding(14, 6, 14, 6)
            };
            swapButton.Click += SwapButton_Click;
            buttonPanel.Controls.Add(swapButton);

            _updateRatesButton = new Button
            {
                Text = "–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã",
                AutoSize = true,
                Padding = new Padding(14, 6, 14, 6)
            };
            _updateRatesButton.Click += UpdateRatesButton_Click;
            buttonPanel.Controls.Add(_updateRatesButton);

            Button themeButton = new Button
            {
                Text = "–°–º–µ–Ω–∞ —Ç–µ–º—ã",
                AutoSize = true,
                Padding = new Padding(14, 6, 14, 6)
            };
            themeButton.Click += ThemeButton_Click;
            buttonPanel.Controls.Add(themeButton);

            _connectionLabel = new Label
            {
                Text = "–°–≤—è–∑—å: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                AutoSize = true,
                Margin = new Padding(0, 12, 0, 0)
            };
            inputLayout.Controls.Add(_connectionLabel, 0, 6);
            inputLayout.SetColumnSpan(_connectionLabel, 2);

            _lastUpdateLabel = new Label
            {
                Text = "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–µ—Ç",
                AutoSize = true,
                Margin = new Padding(0, 4, 0, 0)
            };
            inputLayout.Controls.Add(_lastUpdateLabel, 0, 7);
            inputLayout.SetColumnSpan(_lastUpdateLabel, 2);

            GroupBox historyGroup = new GroupBox
            {
                Text = "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ–æ–Ω–æ–≤—ã—Ö –æ–±–º–µ–Ω–æ–≤",
                Dock = DockStyle.Fill,
                Padding = new Padding(14, 16, 14, 14)
            };
            leftColumn.Controls.Add(historyGroup, 0, 1);

            _historyList = new ListBox
            {
                Dock = DockStyle.Fill,
                BorderStyle = BorderStyle.None,
                IntegralHeight = false,
                DrawMode = DrawMode.OwnerDrawFixed,
                ItemHeight = 34
            };
            _historyList.DrawItem += HistoryList_DrawItem;
            historyGroup.Controls.Add(_historyList);

            // –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ –∫—É—Ä—Å–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            TableLayoutPanel rightColumn = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                ColumnCount = 1,
                RowCount = 2
            };
            rightColumn.RowStyles.Add(new RowStyle(SizeType.Percent, 58f));
            rightColumn.RowStyles.Add(new RowStyle(SizeType.Percent, 42f));
            contentLayout.Controls.Add(rightColumn, 1, 0);

            GroupBox ratesGroup = new GroupBox
            {
                Text = "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã",
                Dock = DockStyle.Fill,
                Padding = new Padding(14, 16, 14, 14)
            };
            rightColumn.Controls.Add(ratesGroup, 0, 0);

            _ratesGrid = new DataGridView
            {
                Dock = DockStyle.Fill,
                ReadOnly = true,
                AllowUserToAddRows = false,
                AllowUserToDeleteRows = false,
                AllowUserToResizeColumns = false,
                AllowUserToResizeRows = false,
                ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize,
                RowHeadersVisible = false,
                SelectionMode = DataGridViewSelectionMode.FullRowSelect,
                AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill,
                BorderStyle = BorderStyle.None
            };
            _ratesGrid.Columns.Add("Code", "–ö–æ–¥ –≤–∞–ª—é—Ç—ã");
            _ratesGrid.Columns.Add("Usd", "–¶–µ–Ω–∞ –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É (USD)");
            ratesGroup.Controls.Add(_ratesGrid);

            TableLayoutPanel analyticsLayout = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                ColumnCount = 1,
                RowCount = 2
            };
            analyticsLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 55f));
            analyticsLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 45f));
            rightColumn.Controls.Add(analyticsLayout, 0, 1);

            GroupBox insightsGroup = new GroupBox
            {
                Text = "–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã",
                Dock = DockStyle.Fill,
                Padding = new Padding(14, 16, 14, 14)
            };
            analyticsLayout.Controls.Add(insightsGroup, 0, 0);

            _insightsView = new ListView
            {
                Dock = DockStyle.Fill,
                View = View.Details,
                FullRowSelect = true,
                MultiSelect = false,
                HideSelection = false,
                BorderStyle = BorderStyle.None,
                HeaderStyle = ColumnHeaderStyle.Nonclickable,
                ShowGroups = true
            };
            _insightsView.Columns.Add("–í–∞–ª—é—Ç–∞", 120);
            _insightsView.Columns.Add("–¶–µ–Ω–∞ (USD)", 110);
            _insightsView.Columns.Add("–≠–Ω–µ—Ä–≥–∏—è", 160);
            _insightsView.SizeChanged += (_, _) => AdjustListViewColumns(_insightsView, 0.36f, 0.26f, 0.38f);
            insightsGroup.Controls.Add(_insightsView);

            GroupBox quickGroup = new GroupBox
            {
                Text = "–ù–µ–æ–Ω–æ–≤—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∫–æ–Ω–≤–µ—Ä—Ç",
                Dock = DockStyle.Fill,
                Padding = new Padding(14, 16, 14, 14)
            };
            analyticsLayout.Controls.Add(quickGroup, 0, 1);

            _quickBurstView = new ListView
            {
                Dock = DockStyle.Fill,
                View = View.Details,
                FullRowSelect = true,
                MultiSelect = false,
                HideSelection = false,
                BorderStyle = BorderStyle.None,
                HeaderStyle = ColumnHeaderStyle.Nonclickable,
                ShowGroups = true
            };
            _quickBurstView.Columns.Add("–í–∞–ª—é—Ç–∞", 110);
            _quickBurstView.Columns.Add("–†–µ–∑—É–ª—å—Ç–∞—Ç", 140);
            _quickBurstView.Columns.Add("–í–∏–±—Ä–∞—Ü–∏–∏", 150);
            _quickBurstView.SizeChanged += (_, _) => AdjustListViewColumns(_quickBurstView, 0.32f, 0.38f, 0.30f);
            quickGroup.Controls.Add(_quickBurstView);

            // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –≤–∏–±–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            _vibePanel = new FlowLayoutPanel
            {
                Dock = DockStyle.Fill,
                AutoSize = true,
                AutoSizeMode = AutoSizeMode.GrowAndShrink,
                FlowDirection = FlowDirection.LeftToRight,
                WrapContents = true,
                Padding = new Padding(28, 10, 28, 16)
            };
            rootLayout.Controls.Add(_vibePanel, 0, 2);

            _answerLabel = new Label
            {
                Text = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
                AutoSize = true,
                Padding = new Padding(0, 4, 0, 0)
            };
            _vibePanel.Controls.Add(_answerLabel);

            _vibeLabel = new Label
            {
                Text = "–ì–æ—Ç–æ–≤—ã –∑–∞–∂–µ—á—å –≤–∞–ª—é—Ç–Ω—ã–π —Ç–∞–Ω—Ü–ø–æ–ª.",
                AutoSize = true,
                Margin = new Padding(18, 4, 0, 0),
                Font = new Font("Segoe UI", 10f, FontStyle.Italic)
            };
            _vibePanel.Controls.Add(_vibeLabel);

            AdjustListViewColumns(_insightsView, 0.36f, 0.26f, 0.38f); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            AdjustListViewColumns(_quickBurstView, 0.32f, 0.38f, 0.30f); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ —ç–∫—Å–ø—Ä–µ—Å—Å–∞

            // –¢–∞–π–º–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            _autoUpdateTimer = new System.Windows.Forms.Timer
            {
                Interval = 4000
            };
            _autoUpdateTimer.Tick += AutoUpdateTimer_Tick;

            _neonTimer = new System.Windows.Forms.Timer
            {
                Interval = 120
            };
            _neonTimer.Tick += (_, _) => _headerPanel.AdvancePhase(0.018f);
            _neonTimer.Start();
        }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
        private async void MainForm_Load(object? sender, EventArgs e) // sender —ç—Ç–æ —Å–∞–º–∞ —Ñ–æ—Ä–º–∞, e —ç—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–æ–±—ã—Ç–∏—è
        {
            await TryUpdateRatesAsync(false); // –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ fslse –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            _autoUpdateTimer.Start(); // –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
        private void LoadCurrencies()
        {
            string[] codes = _converter.GetCurrencyCodes(); // –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –≤–∞–ª—é—Ç
            foreach (string code in codes) // –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–æ–¥—ã
            {
                _fromBox.Items.Add(code); // –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
                _toBox.Items.Add(code); // –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã
            }

            if (_fromBox.Items.Count > 0) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
            {
                _fromBox.SelectedIndex = 0; // –í—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            }
            // –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —á—Ç–æ–±—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ä–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            if (_toBox.Items.Count > 1) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            {
                _toBox.SelectedIndex = 1; // –í—ã–±–∏—Ä–∞–µ—Ç –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        private void ConvertButton_Click(object? sender, EventArgs e) // sender —ç—Ç–æ –∫–Ω–æ–ø–∫–∞, e —ç—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–æ–±—ã—Ç–∏—è
        {
            if (_fromBox.SelectedItem is not string fromCode) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
            {
                MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±–º–µ–Ω."); // –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            }

            if (_toBox.SelectedItem is not string toCode) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã
            {
                MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å."); // –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            }

            if (string.Equals(fromCode, toCode, StringComparison.OrdinalIgnoreCase)) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–∞–ª—é—Ç
            {
                MessageBox.Show("–î–ª—è –æ–±–º–µ–Ω–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ —Ä–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã."); // –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            }

            if (!decimal.TryParse(_amountBox.Text, out decimal amount) || amount < 0) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—É–º–º—ã
            {
                MessageBox.Show("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤."); // –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            }

            int decimals = (int)_decimalsBox.Value; // –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            decimal result = _converter.Convert(fromCode, toCode, amount, decimals); // –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            string amountText = amount.ToString("F2"); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É
            string resultText = result.ToString("F" + decimals); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            _answerLabel.Text = $"{amountText} {fromCode} = {resultText} {toCode}"; // –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–µ—Ç–∫—É
            AddHistoryItem(fromCode, toCode, amount, decimals, result); // –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            UpdateQuickBurst(fromCode, amount, decimals); // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø—Ä–µ—Å—Å-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
            UpdateVibeStatus($"‚ö° {fromCode} ‚Üí {toCode} ‚Äî —ç–Ω–µ—Ä–≥–∏—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!"); // –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç
        }

        // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º–∏ –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
        private void RefreshRatesTable()
        {
            _ratesGrid.Rows.Clear(); // –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            CurrencyInfo[] all = _converter.GetAllCurrencies(); // –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –≤–∞–ª—é—Ç –∏–º–µ–Ω–Ω–æ –∫–æ–ø–∏—é —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
            foreach (CurrencyInfo info in all) // –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –≤–∞–ª—é—Ç—ã
            {
                _ratesGrid.Rows.Add(info.Code, info.PriceInUsd.ToString("F4")); // –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ–¥–æ–º –∏ –∫—É—Ä—Å–æ–º –∞ F4 –æ–∑–Ω–∞—á–∞–µ—Ç 4 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            }
            UpdateInsights(); // –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç –º–µ—Å—Ç–∞–º–∏
        private void SwapButton_Click(object? sender, EventArgs e)
        {
            object? temp = _fromBox.SelectedItem; // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
            _fromBox.SelectedItem = _toBox.SelectedItem; // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π
            _toBox.SelectedItem = temp; // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
        private async void UpdateRatesButton_Click(object? sender, EventArgs e)
        {
            await TryUpdateRatesAsync(true); // –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Å –ø–æ–∫–∞–∑–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        private async void AutoUpdateTimer_Tick(object? sender, EventArgs e)
        {
            await TryUpdateRatesAsync(false); // –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –±–µ–∑ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        }

        // –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        private async Task TryUpdateRatesAsync(bool showMessage)
        {
            if (_isUpdatingRates) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            {
                return;
            }

            _isUpdatingRates = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            _updateRatesButton.Enabled = false; // –û—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

            try
            {
                bool success = await _converter.UpdateRatesFromInternetAsync(); // –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤

                if (success) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                {
                    RefreshRatesTable(); // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤—ã–º–∏ –∫—É—Ä—Å–∞–º–∏
                    _connectionOnline = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    UpdateConnectionTexts(); // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    if (_fromBox.SelectedItem is string quickFrom && decimal.TryParse(_amountBox.Text, out decimal currentAmount) && currentAmount >= 0) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å –ø–∞–Ω–µ–ª—å
                    {
                        int decimals = (int)_decimalsBox.Value; // –ë–µ—Ä—ë—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                        UpdateQuickBurst(quickFrom, currentAmount, decimals); // –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –∫—É—Ä—Å–∞–º–∏
                    }
                    UpdateVibeStatus("üì° –°–≤–µ–∂–∏–µ –∫—É—Ä—Å—ã –Ω–∞ –ø–∞–ª—É–±–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Å–∞–π—Ç—ã!"); // –°–æ–æ–±—â–∞–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏

                    if (showMessage) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    {
                        _answerLabel.Text = "–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ –¥–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞"; // –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    }
                }
                else
                {
                    _connectionOnline = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    UpdateConnectionTexts(); // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    UpdateVibeStatus("üöß –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º ‚Äî –∏–≥—Ä–∞–µ–º –ø–æ —Å—Ç–∞—Ä—ã–º –Ω–æ—Ç–∞–º."); // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ

                    if (showMessage) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    {
                        MessageBox.Show("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã."); // –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    }
                }
            }
            finally
            {
                _updateRatesButton.Enabled = true; // –í–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                _isUpdatingRates = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        private void UpdateConnectionTexts()
        {
            if (_connectionOnline) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            {
                _connectionLabel.Text = $"–°–≤—è–∑—å: –µ—Å—Ç—å (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {_converter.LastSuccessfulUpdate:HH:mm:ss})"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                _connectionLabel.ForeColor = Color.ForestGreen; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            }
            else
            {
                if (_converter.LastSuccessfulUpdate == default) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç —Ç–æ –æ–±—ã—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ 01.01.0001 00:00:00
                {
                    _connectionLabel.Text = "–°–≤—è–∑—å: –Ω–µ—Ç (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫—É—Ä—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }
                else
                {
                    _connectionLabel.Text = $"–°–≤—è–∑—å: –Ω–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ {_converter.LastSuccessfulUpdate:HH:mm:ss})"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                }

                _connectionLabel.ForeColor = Color.DarkRed; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            }

            if (_converter.LastSuccessfulUpdate == default) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            {
                _lastUpdateLabel.Text = "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–µ—Ç"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            }
            else
            {
                _lastUpdateLabel.Text = $"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {_converter.LastSuccessfulUpdate:dd.MM.yyyy HH:mm:ss}"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        private void ThemeButton_Click(object? sender, EventArgs e)
        {
            _isDarkMode = !_isDarkMode; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–ª–∞–≥ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
            ApplyTheme(); // –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        private void ApplyTheme()
        {
            Color backColor = _isDarkMode ? Color.FromArgb(34, 34, 34) : Color.White; // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
            Color textColor = _isDarkMode ? Color.WhiteSmoke : Color.Black; // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã

            BackColor = backColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Ñ–æ—Ä–º—ã
            ForeColor = textColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Ñ–æ—Ä–º—ã

            ApplyThemeRecursive(this, backColor, textColor); // –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º

            Color analyticsBack = _isDarkMode ? Color.FromArgb(32, 34, 48) : Color.FromArgb(244, 246, 255); // –¶–≤–µ—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π
            Color historyBack = _isDarkMode ? Color.FromArgb(24, 25, 33) : Color.FromArgb(250, 250, 255); // –¶–≤–µ—Ç —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            _historyList.BackColor = historyBack; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω –∏—Å—Ç–æ—Ä–∏–∏
            _historyList.ForeColor = textColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏
            _historyList.Invalidate(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞

            StyleListView(_insightsView, analyticsBack, textColor); // –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ –∏–Ω—Å–∞–π—Ç–æ–≤
            StyleListView(_quickBurstView, analyticsBack, textColor); // –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ —ç–∫—Å–ø—Ä–µ—Å—Å-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π

            _vibePanel.BackColor = _isDarkMode ? Color.FromArgb(18, 20, 28) : Color.FromArgb(255, 255, 255); // –ü–æ–¥–∫—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å
            _vibeLabel.ForeColor = _isDarkMode ? Color.FromArgb(218, 222, 240) : Color.FromArgb(64, 64, 78); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤–∏–±–æ–≤

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã –∫—É—Ä—Å–æ–≤
            _ratesGrid.BackgroundColor = backColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Ç–∞–±–ª–∏—Ü—ã
            _ratesGrid.DefaultCellStyle.BackColor = backColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —è—á–µ–µ–∫
            _ratesGrid.DefaultCellStyle.ForeColor = textColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —è—á–µ–µ–∫
            _ratesGrid.DefaultCellStyle.SelectionBackColor = _isDarkMode ? Color.FromArgb(85, 85, 85) : Color.LightBlue; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
            _ratesGrid.DefaultCellStyle.SelectionForeColor = textColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏
            _ratesGrid.RowsDefaultCellStyle.BackColor = backColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç—Ä–æ–∫
            _ratesGrid.RowsDefaultCellStyle.ForeColor = textColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–æ–∫
            _ratesGrid.ColumnHeadersDefaultCellStyle.BackColor = _isDarkMode ? Color.FromArgb(48, 48, 48) : Color.WhiteSmoke; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            _ratesGrid.ColumnHeadersDefaultCellStyle.ForeColor = textColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            _ratesGrid.EnableHeadersVisualStyles = false; // –û—Ç–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            _ratesGrid.AlternatingRowsDefaultCellStyle.BackColor = _isDarkMode ? Color.FromArgb(45, 45, 45) : Color.FromArgb(245, 245, 245); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —á–µ—Ä–µ–¥—É—é—â–∏—Ö—Å—è —Å—Ç—Ä–æ–∫

            _answerLabel.ForeColor = _isDarkMode ? Color.LightGreen : Color.DarkGreen; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –º–µ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            UpdateConnectionTexts(); // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        private void ApplyThemeRecursive(Control parent, Color backColor, Color textColor)
        {
            foreach (Control control in parent.Controls) // –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            {
                if (control is NeonPanel) // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–æ–Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                {
                    continue;
                }

                control.ForeColor = textColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞

                switch (control) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                {
                    case Button button: // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏
                        button.BackColor = _isDarkMode ? Color.FromArgb(64, 64, 64) : Color.LightGray; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–∏
                        button.ForeColor = textColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                        break;
                    case ListView listView: // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–∫–∏
                        listView.BackColor = backColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                        listView.ForeColor = textColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                        break;
                    case ListBox listBox: // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
                        listBox.BackColor = backColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                        listBox.ForeColor = textColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                        break;
                    case Panel or GroupBox: // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª–∏ –∏ –≥—Ä—É–ø–ø—ã
                        control.BackColor = backColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                        break;
                    case DataGridView: // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã
                        control.BackColor = backColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                        break;
                    default: // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        control.BackColor = backColor; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                        break;
                }

                if (control.HasChildren) // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                {
                    ApplyThemeRecursive(control, backColor, textColor); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
                }
            }
        }


        private Control CreateBadge(string text)
        {
            Label badge = new Label
            {
                Text = text,
                AutoSize = true,
                Padding = new Padding(14, 6, 14, 6),
                Margin = new Padding(0, 0, 12, 8),
                ForeColor = Color.White,
                BackColor = Color.FromArgb(96, 0, 0, 0),
                Font = new Font("Segoe UI Semibold", 9.5f, FontStyle.Regular),
                UseMnemonic = false,
            };

            void ApplyRoundedShape()
            {
                if (badge.Width <= 0 || badge.Height <= 0)
                {
                    return;
                }

                using GraphicsPath path = new GraphicsPath();
                Rectangle rect = new Rectangle(Point.Empty, new Size(badge.Width - 1, badge.Height - 1));
                int radius = 18;
                int diameter = radius * 2;
                path.AddArc(rect.X, rect.Y, diameter, diameter, 180, 90);
                path.AddArc(rect.Right - diameter, rect.Y, diameter, diameter, 270, 90);
                path.AddArc(rect.Right - diameter, rect.Bottom - diameter, diameter, diameter, 0, 90);
                path.AddArc(rect.X, rect.Bottom - diameter, diameter, diameter, 90, 90);
                path.CloseFigure();
                badge.Region = new Region(path);
            }

            badge.Resize += (_, _) => ApplyRoundedShape();
            badge.CreateControl();
            ApplyRoundedShape();
            return badge;
        }

        private void StyleListView(ListView view, Color backColor, Color textColor)
        {
            view.BackColor = backColor;
            view.ForeColor = textColor;
            view.BorderStyle = BorderStyle.None;
            view.FullRowSelect = true;
            view.HideSelection = false;
            foreach (ListViewItem item in view.Items)
            {
                item.BackColor = backColor;
                item.ForeColor = textColor;
            }
        }

        private void HistoryList_DrawItem(object? sender, DrawItemEventArgs e)
        {
            e.DrawBackground();
            if (e.Index < 0 || e.Index >= _historyList.Items.Count)
            {
                return;
            }

            string text = _historyList.Items[e.Index]?.ToString() ?? string.Empty;
            Rectangle bounds = new Rectangle(e.Bounds.X + 4, e.Bounds.Y + 4, Math.Max(0, e.Bounds.Width - 8), Math.Max(0, e.Bounds.Height - 8));

            Color start = _isDarkMode ? Color.FromArgb(160, 78, 205, 196) : Color.FromArgb(170, 140, 220, 255);
            Color end = _isDarkMode ? Color.FromArgb(160, 120, 160, 255) : Color.FromArgb(170, 255, 180, 215);
            if (e.State.HasFlag(DrawItemState.Selected))
            {
                start = Color.FromArgb(200, start);
                end = Color.FromArgb(200, end);
            }

            using LinearGradientBrush brush = new LinearGradientBrush(bounds, start, end, LinearGradientMode.Horizontal);
            using GraphicsPath pathShape = new GraphicsPath();
            pathShape.AddArc(bounds.X, bounds.Y, 24, 24, 180, 90);
            pathShape.AddArc(bounds.Right - 24, bounds.Y, 24, 24, 270, 90);
            pathShape.AddArc(bounds.Right - 24, bounds.Bottom - 24, 24, 24, 0, 90);
            pathShape.AddArc(bounds.X, bounds.Bottom - 24, 24, 24, 90, 90);
            pathShape.CloseFigure();
            e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
            e.Graphics.FillPath(brush, pathShape);

            Color borderColor = _isDarkMode ? Color.FromArgb(120, 0, 0, 0) : Color.FromArgb(90, 255, 255, 255);
            using Pen borderPen = new Pen(borderColor, 1.2f);
            e.Graphics.DrawPath(borderPen, pathShape);

            string prefix = e.Index switch
            {
                0 => "üî•",
                1 => "üöÄ",
                2 => "üéØ",
                _ => "üéß"
            };

            Rectangle textBounds = new Rectangle(bounds.X + 16, bounds.Y + 7, Math.Max(0, bounds.Width - 24), Math.Max(0, bounds.Height - 14));
            using Font textFont = new Font("Segoe UI", 9.5f, FontStyle.Regular);
            TextRenderer.DrawText(
                e.Graphics,
                $"{prefix} {text}",
                textFont,
                textBounds,
                _isDarkMode ? Color.WhiteSmoke : Color.FromArgb(32, 32, 32),
                TextFormatFlags.EndEllipsis);

            e.DrawFocusRectangle();
        }

        private void AddHistoryItem(string fromCode, string toCode, decimal amount, int decimals, decimal result)
        {
            if (_historyList == null)
            {
                return;
            }

            string timestamp = DateTime.Now.ToString("HH:mm:ss");
            string amountText = amount.ToString("F2");
            string resultText = result.ToString("F" + Math.Clamp(decimals, 0, 6));
            string entry = $"{timestamp} ‚Ä¢ {amountText} {fromCode} ‚Üí {resultText} {toCode}";

            _historyList.BeginUpdate();
            _historyList.Items.Insert(0, entry);
            while (_historyList.Items.Count > 10)
            {
                _historyList.Items.RemoveAt(_historyList.Items.Count - 1);
            }
            _historyList.EndUpdate();
            _historyList.SelectedIndex = -1;
            _historyList.Invalidate();
        }

        private void UpdateInsights()
        {
            if (_insightsView == null)
            {
                return;
            }

            CurrencyInfo[] currencies = _converter.GetAllCurrencies();
            _insightsView.BeginUpdate();
            _insightsView.Items.Clear();
            _insightsView.Groups.Clear();

            if (currencies.Length == 0)
            {
                _insightsView.EndUpdate();
                return;
            }

            ListViewGroup topGroup = new ListViewGroup("–õ–µ–≥–µ–Ω–¥—ã –∫—É—Ä—Å–∞", HorizontalAlignment.Left);
            ListViewGroup chillGroup = new ListViewGroup("–î—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Ü–µ–Ω—ã", HorizontalAlignment.Left);
            _insightsView.Groups.Add(topGroup);
            _insightsView.Groups.Add(chillGroup);

            CurrencyInfo[] top = currencies.OrderByDescending(c => c.PriceInUsd).Take(3).ToArray();
            CurrencyInfo[] low = currencies.OrderBy(c => c.PriceInUsd).Take(3).ToArray();
            decimal topAnchor = top.Length > 0 ? top[0].PriceInUsd : 1m;
            decimal lowAnchor = low.Length > 0 ? low[0].PriceInUsd : 1m;

            foreach (CurrencyInfo info in top)
            {
                ListViewItem item = new ListViewItem(info.Code, topGroup);
                item.SubItems.Add(info.PriceInUsd.ToString("F4"));
                item.SubItems.Add(BuildEnergyBar(info.PriceInUsd, topAnchor, false, "‚ö°"));
                _insightsView.Items.Add(item);
            }

            foreach (CurrencyInfo info in low)
            {
                ListViewItem item = new ListViewItem(info.Code, chillGroup);
                item.SubItems.Add(info.PriceInUsd.ToString("F4"));
                item.SubItems.Add(BuildEnergyBar(info.PriceInUsd, lowAnchor, true, "üíß"));
                _insightsView.Items.Add(item);
            }

            _insightsView.EndUpdate();
            AdjustListViewColumns(_insightsView, 0.36f, 0.26f, 0.38f);
        }

        private void UpdateQuickBurst(string fromCode, decimal amount, int decimals)
        {
            if (_quickBurstView == null)
            {
                return;
            }

            CurrencyInfo[] highlights = _converter
                .GetAllCurrencies()
                .Where(info => !string.Equals(info.Code, fromCode, StringComparison.OrdinalIgnoreCase))
                .OrderByDescending(info => info.PriceInUsd)
                .Take(4)
                .ToArray();

            _quickBurstView.BeginUpdate();
            _quickBurstView.Items.Clear();
            _quickBurstView.Groups.Clear();

            if (highlights.Length == 0)
            {
                _quickBurstView.EndUpdate();
                return;
            }

            ListViewGroup group = new ListViewGroup("–ù–µ–æ–Ω–æ–≤—ã–π –∑–∞–ª–ø", HorizontalAlignment.Left);
            _quickBurstView.Groups.Add(group);
            int safeDecimals = Math.Clamp(decimals, 0, 6);
            decimal anchor = highlights[0].PriceInUsd;

            foreach (CurrencyInfo target in highlights)
            {
                decimal converted = _converter.Convert(fromCode, target.Code, amount, safeDecimals);
                string formatted = converted.ToString("F" + safeDecimals);
                ListViewItem item = new ListViewItem(target.Code, group);
                item.SubItems.Add(formatted);
                item.SubItems.Add(BuildEnergyBar(target.PriceInUsd, anchor, false, "‚ú®"));
                _quickBurstView.Items.Add(item);
            }

            _quickBurstView.EndUpdate();
            AdjustListViewColumns(_quickBurstView, 0.32f, 0.38f, 0.30f);
        }

        private void AdjustListViewColumns(ListView view, params float[] ratios)
        {
            if (view.Columns.Count != ratios.Length)
            {
                return;
            }

            int width = view.ClientSize.Width;
            if (width <= 0)
            {
                width = view.Width;
            }

            for (int i = 0; i < ratios.Length; i++)
            {
                float ratio = Math.Clamp(ratios[i], 0f, 1f);
                int columnWidth = Math.Max(60, (int)(width * ratio));
                view.Columns[i].Width = columnWidth;
            }
        }

        private string RepeatSymbol(string symbol, int count)
        {
            if (count <= 0)
            {
                return symbol;
            }

            return string.Concat(Enumerable.Repeat(symbol, count));
        }

        private string BuildEnergyBar(decimal value, decimal reference, bool invert, string symbol)
        {
            if (reference <= 0)
            {
                reference = 1m;
            }

            decimal ratio = invert ? reference / Math.Max(value, 0.000001m) : value / reference;
            ratio = Math.Clamp(ratio, 0m, 4m);
            int pulses = Math.Clamp((int)Math.Round((double)(ratio * 2.5m) + 1), 1, 7);
            return RepeatSymbol(symbol, pulses);
        }

        private void UpdateVibeStatus(string leadMessage)
        {
            if (_vibeLabel == null)
            {
                return;
            }

            string vibe = string.IsNullOrWhiteSpace(leadMessage) ? string.Empty : leadMessage.Trim();
            string tail = _vibeLibrary.Length > 0 ? _vibeLibrary[_random.Next(_vibeLibrary.Length)] : string.Empty;
            if (!string.IsNullOrEmpty(tail))
            {
                vibe = string.IsNullOrEmpty(vibe) ? tail : $"{vibe} ‚Ä¢ {tail}";
            }

            _vibeLabel.Text = vibe;
        }

        private void MainForm_FormClosed(object? sender, FormClosedEventArgs e)
        {
            _autoUpdateTimer.Stop();
            _neonTimer.Stop();
        }
    }
}
